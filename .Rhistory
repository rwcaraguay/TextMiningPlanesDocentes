shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
archivo
runApp()
runApp()
archivo
runApp()
a = 3+5
a
runApp()
runApp()
runExample("09_upload")
runApp()
runExample("09_upload")
runExample("09_upload")
runExample("09_upload")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runExample("09_upload")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
4+5
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/x86_64-pc-linux-gnu-library/3.2/shiny/examples/09_upload')
runApp('~/R/x86_64-pc-linux-gnu-library/3.2/shiny/examples/09_upload')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d1577dfa2559186735b700eb
fil
files$datapath
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
limpiezadatos = reactive({
input$procesamiento
actualizarmtd = isolate({
documentos = Corpus(DirSource("/home/robert/R/AppTextMining/TextMining/pruebas/prueba1/corpus/", encoding = "UTF-8"))
espacio <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
corpusclean = tm_map(documentos, espacio, "[[:punct:]]+")
corpusclean = tm_map(corpusclean, removePunctuation)
corpusclean = tm_map(corpusclean, content_transformer(tolower))
corpusclean = tm_map(corpusclean, removeNumbers)
corpusclean = tm_map(corpusclean, stripWhitespace)
corpuslimpio = corpusclean
#Eliminar palabras vac?as a partir de un documento
corpusprocesado = tm_map(corpuslimpio, removeWords, c(stopwords("spanish"), "corpus"))
archivopalabrasvacias = readLines("/home/robert/R/AppTextMining/TextMining/archivos/palabrasvacias", encoding = "UTF-8")#Cargar archivo de palabras vac?as en espa?ol y convertir a ASCII
archivopalabrasvacias = iconv(archivopalabrasvacias, to = "ASCII//TRANSLIT")
corpusprocesado = tm_map(corpusprocesado, removeWords, archivopalabrasvacias)#Eliminar las palabras vac?as a partir del documento
corpusprocesado = tm_map(corpusprocesado, stripWhitespace)#Eliminar espacios en blanco adicionales
#Lematizar las palabras de los documentos
corpusprocesado = tm_map(corpusprocesado, stemDocument, language="spanish") #Lematizaci?n en el idioma espa?ol
corpusmatriz = corpusprocesado
writeCorpus(corpusmatriz, path = "/home/robert/R/AppTextMining/TextMining/pruebas/prueba1/preprocesados/") #guardar los archivos pre-procesados
vocabulario = readLines("/home/robert/R/AppTextMining/TextMining/pruebas/prueba1/vocabulario", encoding = "UTF-8")#Cargar archivo con el vocabulario
vocabulario = iconv(vocabulario, to = "ASCII//TRANSLIT")
matrizterminodocumento = DocumentTermMatrix(corpusmatriz, control = list(dictionary = c(vocabulario), tokenize = NGramTokenizer)) #Crear MTD apartir del vocabulario
matriz = as.matrix(matrizterminodocumento)#Crear matriz de caracteres apartir de los t?rminos
#write.csv(matriz, file = "/home/robert/R/AppTextMining/TextMining/mtdp1.csv", row.names = TRUE, fileEncoding = "ASCII//TRANSLIT")#guardar la mtd en formato csv
})
})
obtenerfrecuencia = reactive({
input$frecuenciapalabras
frecuencia = limpiezadatos()
actualizarfrecuencia = isolate({
#frecuencia = limpiezadatos()#obtener la mtd
frecuencia = colSums(frecuencia) #Frecuencia de los t?rminos, organiza de acuerdo a la frecuencia.
frecuencia = subset(frecuencia, frecuencia >= 1)#Palabras con frecuencia > 3
frecuencia = sort(frecuencia, decreasing = TRUE)#Ordenar descendente con el n?mero de frecuencia de t?rminos
frecupalab = data.frame(palabras = (names(frecuencia)), frecuencia = frecuencia)
ggplot(subset(frecupalab, frecuencia>=1), aes(palabras, frecuencia))+geom_bar(stat = "identity", fill = "steelblue")+theme_minimal()+
theme(axis.text.x=element_text(angle = 90, hjust = 1, color = "black"))+geom_text(aes(label = frecuencia), vjust=-0.3, size=3.5)
})
})
limpiezadatos()
obtenerfrecuencia()
hola = limpiezadatos()
hola () = limpiezadatos()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/R/AppTextMiningTest2')
shiny::runApp('~/R/AppTextMiningTest2')
library(shiny)
library(NLP) #librer?a para el procesamiento del lenguaje natural
library(tm) #librer?a para text mining
library(SnowballC) #Para lematizar las palabras
library(cluster)
library(fpc)
library(RWeka) #Librer√≠a para formar n-gramas
library(stats) #Libreria para el K-mean
library(ggplot2) #Para dibugar histograma
runApp()
runApp('Prueba2')
runApp()
shiny::runApp('Prueba2')
library(ggplot2) #Para dibugar histograma
shiny::runApp()
shiny::runApp()
runApp('Prueba1')
runApp('Prueba1')
documentos = Corpus(DirSource("Prueba1/corpus/", encoding = "UTF-8"))
runApp('Prueba1')
shiny::runApp('Prueba1')
runApp('Prueba6')
shiny::runApp('Prueba5')
runApp('Prueba5')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
shiny::runApp('Prueba1')
getwd()
shiny::runApp('Prueba1')
setwd("C:/Users/RobertWladimir/Documents/R/AppTextMining")
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
setwd(dir = "C:/Users/RobertWladimir/Documents/R/AppTextMining")
getwd()
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
shiny::runApp('Prueba1')
